/*
 * -jaki procent obrazów jest zliczona
 * -czy na pewno chcemy coś zapisać czy coż samknąć
 * 
 */
package gui;

import imageProcessing.improvQualityDicom;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FilenameUtils;
import mydicom.DataDICOM;

/**
 *
 * @author Małgorzata
 */
public class ReadDicom extends javax.swing.JFrame {

    File fname;
    FilenameFilter fileNameFilter;
    Tools odczyt = new Tools();
    DefaultListModel model = new DefaultListModel();//gdy nie dodałam inicjalizaci wystepował bład
    DataDICOM dataDicom = new DataDICOM();//obiekt który znajduje sie w innym Packages
    scaleImage SCI = new scaleImage();
    improvQualityDicom iQD = new improvQualityDicom();

    public ReadDicom() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        imagePanel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList(model);
        zoomSlider = new javax.swing.JSlider(new DefaultBoundedRangeModel(100, 0,100,150));
        patientData = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenu = new javax.swing.JMenuItem();
        saveJPGMenu = new javax.swing.JMenuItem();
        openDirMenu = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setToolTipText("");

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imagePanel.setBackground(new java.awt.Color(0, 0, 0));
        imagePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePanel.setLabelFor(imagePanel);
        imagePanel.setOpaque(true);
        jScrollPane1.setViewportView(imagePanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jScrollPane2.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        fileList.setBackground(new java.awt.Color(0, 0, 0));
        fileList.setForeground(new java.awt.Color(244, 244, 244));
        fileList.setMaximumSize(new java.awt.Dimension(200, 200));
        fileList.setMinimumSize(new java.awt.Dimension(200, 200));
        jScrollPane2.setViewportView(fileList);

        zoomSlider.setForeground(new java.awt.Color(0, 0, 0));
        zoomSlider.setMajorTickSpacing(10);
        zoomSlider.setMinorTickSpacing(5);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setToolTipText("");
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });

        patientData.setBackground(new java.awt.Color(0, 0, 0));
        patientData.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        patientData.setAutoscrolls(true);

        fileMenu.setText("File");

        openFileMenu.setText("Open");
        openFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenu);

        saveJPGMenu.setText("Save(as jpng)");
        saveJPGMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJPGMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveJPGMenu);

        openDirMenu.setText("Open Directory");
        openDirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openDirMenu);

        jMenuItem4.setText("jMenuItem4");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(patientData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zoomSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientData, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed

    }//GEN-LAST:event_jMenu2ActionPerformed

    private void openFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuActionPerformed
        //Gui odczyt=new Tools();
        //EqualizationHistogram histEQ = new EqualizationHistogram();
        JFileChooser chooser = new JFileChooser(new File("C:\\Users\\Małgorzata\\Desktop"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "PNG & DCOM Images ale tak na serio nie otwiera PNG", "dcm");
        chooser.setFileFilter(filter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            //System.out.println("multi ");
            fname = chooser.getSelectedFile();
            try {
//           ImageIcon iconS= new ImageIcon(odczyt.openDicomFile(fname));
                ImageIcon iconS = new ImageIcon(iQD.endImage(fname));
                imagePanel.setIcon(iconS);
                patientData.setText(dataDicom.dataInf(fname.getName()));
                System.out.println("nazwa wybranego pliku" + fname.getName());
            } catch (Exception ex) {
                Logger.getLogger(ReadDicom.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//    SCI.getSlider(jLabel1, jSlider1);
    }//GEN-LAST:event_openFileMenuActionPerformed

    private void saveJPGMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJPGMenuActionPerformed
        JFileChooser chooser = new JFileChooser(new File("C:\\Users\\Małgorzata\\Desktop"));
        chooser.setFileFilter(new FileNameExtensionFilter(".png", "png"));
        int result = chooser.showSaveDialog(null);
        if (imagePanel.getIcon() != null) {//sprawdza czy cos jest w 
            System.out.println("obraz jest w jalbaej");
            if (result == JFileChooser.APPROVE_OPTION) {
                ImageIcon icon = (ImageIcon) imagePanel.getIcon();
                BufferedImage obrazek = (BufferedImage) ((Image) icon.getImage());
                File saveFile = chooser.getSelectedFile();
                if (FilenameUtils.getExtension(saveFile.getName()).equalsIgnoreCase(".png")) {//equalsIgnoreCase- ignoruje wielkość 
                    // filename is OK as-is
                } else {
                    saveFile = new File(saveFile.toString() + ".png");
                    saveFile = new File(saveFile.getParentFile(), FilenameUtils.getBaseName(saveFile.getName()) + ".png"); // ALTERNATIVELY: remove the extension (if any) and replace it with ".xml"
                }
                try {
                    ImageIO.write(obrazek, "png", saveFile);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                System.out.println("empty");
            }
        }
    }//GEN-LAST:event_saveJPGMenuActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        System.exit(1);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void openDirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirMenuActionPerformed

        IconCellRenderer render = new IconCellRenderer();
        fileList.setCellRenderer(render);

        JFileChooser chooser = new JFileChooser(new File("C:\\Users\\Małgorzata\\Desktop"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "PNG & DCOM Images ale tak na serio nie otwiera PNG", "dcm");
        chooser.setFileFilter(filter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            fname = chooser.getSelectedFile();
            final File dir = fname.getParentFile();//ścieszka
            try {
                final ArrayList<DCMDirItem> list = Tools.readDicomDir(dir, model);
                fileList.setModel(model);

                ListSelectionListener listener = new ListSelectionListener() {
                    @Override
                    public void valueChanged(ListSelectionEvent lse) {//metoda wartość zmian(argument lista wybranych wydarzeń)
                        Object o = fileList.getSelectedValue();//obiekt JList pobiera wybrane wartości
                        if (o instanceof BufferedImage) {
                            String fn;//nazwa wybranego pliku
                            imagePanel.setIcon(new ImageIcon((BufferedImage) o));
                            //zrobione w celu porównania wartośći wybranej do jakiego pliku należy
                            //aby wyciagnac jego nazwe
                            for (DCMDirItem item : list) {
                                if (item.getItem().equals(o)) {
                                    fn = item.getName();
                                    try {
                                        patientData.setText(dataDicom.dataInf(fn));
                                    } catch (Exception ex) {
                                        Logger.getLogger(ReadDicom.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        }
                    }

                };

                fileList.addListSelectionListener(listener);
            } catch (Exception ex) {
                Logger.getLogger(ReadDicom.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openDirMenuActionPerformed

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged

        final BufferedImage inO = SCI.getPicture(imagePanel);

        zoomSlider.addChangeListener(new ChangeListener() {
            final BufferedImage obrazek = inO;

            @Override
            public void stateChanged(ChangeEvent ce) {
                final double range = ((JSlider) ce.getSource()).getValue();
//            System.out.println("range "+range);
                final double multi = (range / 100);
//            System.out.println("multi "+multi);
//            final BufferedImage obrazek = SCI.getPicture(jLabel1);
                try {
                    BufferedImage ob = obrazek;
//                System.out.println("obrazek "+ob);
                    BufferedImage sc = SCI.makeImage(ob, multi, multi);
                    ImageIcon iconS = new ImageIcon(sc);
                    imagePanel.setIcon(iconS);
                } catch (Exception ex) {
                    Logger.getLogger(ReadDicom.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_zoomSliderStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadDicom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadDicom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadDicom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadDicom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ReadDicom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> fileList;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel imagePanel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem openDirMenu;
    private javax.swing.JMenuItem openFileMenu;
    private javax.swing.JLabel patientData;
    private javax.swing.JMenuItem saveJPGMenu;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables

}
