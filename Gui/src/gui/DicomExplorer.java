/*
 * -jaki procent obrazów jest zliczona
 * -czy na pewno chcemy coś zapisać czy coż samknąć
 * 
 */
package gui;

import mydicom.DicomFileContent;
import imageProcessing.improvQualityDicom;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import mydicom.DicomTools;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author Małgorzata
 */
public class DicomExplorer extends javax.swing.JFrame {

    private String initialPath = "/home/jstar/tmp/NMalgorzata/Gui/data/krtan";
    
    private File fname;
    private BufferedImage currentImg = null;
    improvQualityDicom iQD = new improvQualityDicom();
    IconCellRenderer listRenderer = new IconCellRenderer();

    public DicomExplorer() {
        initComponents();
        fileList.setModel(new DefaultListModel<DicomFileContent>());
        fileList.setCellRenderer(listRenderer);
        fileList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {//metoda wartość zmian(argument lista wybranych wydarzeń)
                Object o = fileList.getSelectedValue();//obiekt JList pobiera wybrane wartości

                if (o instanceof DicomFileContent) {
                    DicomFileContent fc = ((DicomFileContent) o);
                    currentImg = fc.getImage();
                    imagePanel.setIcon(new ImageIcon(currentImg));
                    patientData.setText(fc.getData());
                }
            }
        });
        zoomSlider.addChangeListener(new ZoomSliderListener(imagePanel));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        imgScroll = new javax.swing.JScrollPane();
        imagePanel = new javax.swing.JLabel();
        fileListScroll = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        zoomSlider = new javax.swing.JSlider(new DefaultBoundedRangeModel(100, 0,100,150));
        patientData = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        openDirMenuItem = new javax.swing.JMenuItem();
        savePNGMenuItem = new javax.swing.JMenuItem();
        separator = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        optionsMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        mainPanel.setBackground(new java.awt.Color(0, 0, 0));
        mainPanel.setToolTipText("");

        imgScroll.setBackground(new java.awt.Color(0, 0, 0));
        imgScroll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        imagePanel.setBackground(new java.awt.Color(0, 0, 0));
        imagePanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePanel.setLabelFor(imagePanel);
        imagePanel.setOpaque(true);
        imgScroll.setViewportView(imagePanel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imgScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imgScroll)
        );

        fileListScroll.setBackground(new java.awt.Color(0, 0, 0));
        fileListScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        fileList.setBackground(new java.awt.Color(0, 0, 0));
        fileList.setForeground(new java.awt.Color(244, 244, 244));
        fileList.setMaximumSize(new java.awt.Dimension(200, 200));
        fileList.setMinimumSize(new java.awt.Dimension(200, 200));
        fileListScroll.setViewportView(fileList);

        zoomSlider.setForeground(new java.awt.Color(0, 0, 0));
        zoomSlider.setMajorTickSpacing(10);
        zoomSlider.setMinorTickSpacing(5);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setToolTipText("");
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });

        patientData.setBackground(new java.awt.Color(0, 0, 0));
        patientData.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        patientData.setAutoscrolls(true);
        patientData.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 2, 2));

        fileMenu.setText("File");

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        openFileMenuItem.setText("Open file");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        openDirMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, 0));
        openDirMenuItem.setText("Open Directory");
        openDirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openDirMenuItem);

        savePNGMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        savePNGMenuItem.setText("Save(as png)");
        savePNGMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePNGMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(savePNGMenuItem);
        fileMenu.add(separator);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuActionPerformed(evt);
            }
        });
        menuBar.add(editMenu);

        optionsMenu.setText("Options");

        jMenuItem1.setText("Switch List View");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        optionsMenu.add(jMenuItem1);

        menuBar.add(optionsMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(patientData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zoomSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientData, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuActionPerformed

    }//GEN-LAST:event_editMenuActionPerformed

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        //Gui odczyt=new Tools();
        //EqualizationHistogram histEQ = new EqualizationHistogram();
        JFileChooser chooser = new JFileChooser(new File(initialPath));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "DCOM Images", "dcm");
        chooser.setFileFilter(filter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fname = chooser.getSelectedFile();
            initialPath = fname.getPath();
            try {
                currentImg = iQD.endImage(fname);
                ImageIcon iconS = new ImageIcon(currentImg);
                imagePanel.setIcon(iconS);
                patientData.setText(DicomTools.dataInf(fname.getName()));
                ((DefaultListModel) fileList.getModel()).removeAllElements();
                System.out.println("nazwa wybranego pliku" + fname.getName());
            } catch (Exception ex) {
                Logger.getLogger(DicomExplorer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void savePNGMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePNGMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser(new File(initialPath));
        chooser.setFileFilter(new FileNameExtensionFilter(".png", "png"));
        int result = chooser.showSaveDialog(null);
        if (imagePanel.getIcon() != null) {//sprawdza czy cos jest w 
            System.out.println("obraz jest w jalbaej");
            if (result == JFileChooser.APPROVE_OPTION) {
                ImageIcon icon = (ImageIcon) imagePanel.getIcon();
                BufferedImage obrazek = (BufferedImage) ((Image) icon.getImage());
                File saveFile = chooser.getSelectedFile();
                if (FilenameUtils.getExtension(saveFile.getName()).equalsIgnoreCase(".png")) {//equalsIgnoreCase- ignoruje wielkość 
                    // filename is OK as-is
                } else {
                    saveFile = new File(saveFile.toString() + ".png");
                    saveFile = new File(saveFile.getParentFile(), FilenameUtils.getBaseName(saveFile.getName()) + ".png"); // ALTERNATIVELY: remove the extension (if any) and replace it with ".xml"
                }
                try {
                    ImageIO.write(obrazek, "png", saveFile);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                System.out.println("empty");
            }
        }
    }//GEN-LAST:event_savePNGMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(1);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openDirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirMenuItemActionPerformed

        JFileChooser chooser = new JFileChooser(new File(initialPath));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("DCOM Images", "dcm");

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            fname = chooser.getSelectedFile();
            initialPath = fname.getPath();
            File dir = fname.isFile() ? fname.getParentFile() : fname;
            try {
                DicomTools.readDicomDir(dir, (DefaultListModel<DicomFileContent>) fileList.getModel());
            } catch (Exception ex) {
                Logger.getLogger(DicomExplorer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openDirMenuItemActionPerformed

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged

        if (currentImg != null) {
            ((ZoomSliderListener)zoomSlider.getChangeListeners()[0]).updateImg(currentImg);
        }
    }//GEN-LAST:event_zoomSliderStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        listRenderer.switchView();
        fileList.repaint();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DicomExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DicomExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DicomExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DicomExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DicomExplorer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JList<DicomFileContent> fileList;
    private javax.swing.JScrollPane fileListScroll;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel imagePanel;
    private javax.swing.JScrollPane imgScroll;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openDirMenuItem;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JLabel patientData;
    private javax.swing.JMenuItem savePNGMenuItem;
    private javax.swing.JPopupMenu.Separator separator;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables

}
